%% Import data from text file.
% Script for importing data from the following text file:
%
%    /Users/georgeyu/Desktop/Classwork/AML/AML-final-project/sfo_data.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2016/04/23 16:05:13

%% Initialize variables.
% switch filename path to your local path
filename = '/Users/serena/Dropbox/ColumbiaSpring2016/AML_4772/project/sfo_data.csv';
delimiter = ',';
startRow = 2;

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,7,8,9,10,12,13,16,17,18,21,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,51,52,53,54,55,56,60,64,65,69,70,71,72,73,77,78,81,83,84,85,86,87,88,89,90]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end

dateFormatIndex = 1;
blankDates = cell(1,size(raw,2));
anyBlankDates = false(size(raw,1),1);
invalidDates = cell(1,size(raw,2));
anyInvalidDates = false(size(raw,1),1);
for col=[14,15]% Convert the contents of columns with dates to MATLAB datetimes using date format string.
    try
        dates{col} = datetime(dataArray{col}, 'Format', 'hh:mm a', 'InputFormat', 'hh:mm a'); %#ok<SAGROW>
    catch
        try
            % Handle dates surrounded by quotes
            dataArray{col} = cellfun(@(x) x(2:end-1), dataArray{col}, 'UniformOutput', false);
            dates{col} = datetime(dataArray{col}, 'Format', 'hh:mm a', 'InputFormat', 'hh:mm a'); %%#ok<SAGROW>
        catch
            dates{col} = repmat(datetime([NaN NaN NaN]), size(dataArray{col})); %#ok<SAGROW>
        end
    end
    
    dateFormatIndex = dateFormatIndex + 1;
    blankDates{col} = cellfun(@isempty, dataArray{col});
    anyBlankDates = blankDates{col} | anyBlankDates;
    invalidDates{col} = isnan(dates{col}.Hour) - blankDates{col};
    anyInvalidDates = invalidDates{col} | anyInvalidDates;
end
dates = dates(:,[14,15]);
blankDates = blankDates(:,[14,15]);
invalidDates = invalidDates(:,[14,15]);

%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [1,2,3,4,5,6,7,8,9,10,12,13,16,17,18,21,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,51,52,53,54,55,56,60,64,65,69,70,71,72,73,77,78,81,83,84,85,86,87,88,89,90]);
rawCellColumns = raw(:, [11,19,20,22,23,24,48,49,50,57,58,59,61,62,63,66,67,68,74,75,76,79,80,82]);


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Allocate imported array to column variable names
RESPNUM = cell2mat(rawNumericColumns(:, 1));
CCGID = cell2mat(rawNumericColumns(:, 2));
RUNID = cell2mat(rawNumericColumns(:, 3));
INTDATE = cell2mat(rawNumericColumns(:, 4));
AIRLINE = cell2mat(rawNumericColumns(:, 5));
FLIGHT = cell2mat(rawNumericColumns(:, 6));
DESTINATION = cell2mat(rawNumericColumns(:, 7));
DESTGEO = cell2mat(rawNumericColumns(:, 8));
DESTMARK = cell2mat(rawNumericColumns(:, 9));
GATE = cell2mat(rawNumericColumns(:, 10));
BAREA = rawCellColumns(:, 1);
STRATA = cell2mat(rawNumericColumns(:, 11));
PEAK = cell2mat(rawNumericColumns(:, 12));
DEPTIME = dates{:, 1};
ARRTIME = dates{:, 2};
HOWLONG = cell2mat(rawNumericColumns(:, 13));
METHOD = cell2mat(rawNumericColumns(:, 14));
Q2PURP1 = cell2mat(rawNumericColumns(:, 15));
Q2PURP2 = rawCellColumns(:, 2);
Q2PURP3 = rawCellColumns(:, 3);
Q3GETTO1 = cell2mat(rawNumericColumns(:, 16));
Q3GETTO2 = rawCellColumns(:, 4);
Q3GETTO3 = rawCellColumns(:, 5);
Q3PARK = rawCellColumns(:, 6);
Q4BAGS = cell2mat(rawNumericColumns(:, 17));
Q4STORE = cell2mat(rawNumericColumns(:, 18));
Q4FOOD = cell2mat(rawNumericColumns(:, 19));
Q4WIFI = cell2mat(rawNumericColumns(:, 20));
Q5TIMESFLOWN = cell2mat(rawNumericColumns(:, 21));
Q5FIRSTTIME = cell2mat(rawNumericColumns(:, 22));
Q6LONGUSE = cell2mat(rawNumericColumns(:, 23));
SAQ = cell2mat(rawNumericColumns(:, 24));
Q7ART = cell2mat(rawNumericColumns(:, 25));
Q7FOOD = cell2mat(rawNumericColumns(:, 26));
Q7STORE = cell2mat(rawNumericColumns(:, 27));
Q7SIGN = cell2mat(rawNumericColumns(:, 28));
Q7WALKWAYS = cell2mat(rawNumericColumns(:, 29));
Q7SCREENS = cell2mat(rawNumericColumns(:, 30));
Q7INFODOWN = cell2mat(rawNumericColumns(:, 31));
Q7INFOUP = cell2mat(rawNumericColumns(:, 32));
Q7WIFI = cell2mat(rawNumericColumns(:, 33));
Q7ROADS = cell2mat(rawNumericColumns(:, 34));
Q7PARK = cell2mat(rawNumericColumns(:, 35));
Q7AIRTRAIN = cell2mat(rawNumericColumns(:, 36));
Q7LTPARKING = cell2mat(rawNumericColumns(:, 37));
Q7RENTAL = cell2mat(rawNumericColumns(:, 38));
Q7ALL = cell2mat(rawNumericColumns(:, 39));
Q8COM1 = rawCellColumns(:, 7);
Q8COM2 = rawCellColumns(:, 8);
Q8COM3 = rawCellColumns(:, 9);
Q9BOARDING = cell2mat(rawNumericColumns(:, 40));
Q9AIRTRAIN = cell2mat(rawNumericColumns(:, 41));
Q9RENTAL = cell2mat(rawNumericColumns(:, 42));
Q9FOOD = cell2mat(rawNumericColumns(:, 43));
Q9RESTROOM = cell2mat(rawNumericColumns(:, 44));
Q9ALL = cell2mat(rawNumericColumns(:, 45));
Q9COM1 = rawCellColumns(:, 10);
Q9COM2 = rawCellColumns(:, 11);
Q9COM3 = rawCellColumns(:, 12);
Q10SAFE = cell2mat(rawNumericColumns(:, 46));
Q10COM1 = rawCellColumns(:, 13);
Q10COM2 = rawCellColumns(:, 14);
Q10COM3 = rawCellColumns(:, 15);
Q11TSAPRE = cell2mat(rawNumericColumns(:, 47));
Q12PRECHEKCRATE = cell2mat(rawNumericColumns(:, 48));
Q12COM1 = rawCellColumns(:, 16);
Q12COM2 = rawCellColumns(:, 17);
Q12COM3 = rawCellColumns(:, 18);
Q13COUNTY = cell2mat(rawNumericColumns(:, 49));
Q13GETRATE = cell2mat(rawNumericColumns(:, 50));
Q14FIND = cell2mat(rawNumericColumns(:, 51));
Q14PASSTHRU = cell2mat(rawNumericColumns(:, 52));
Q15PROBLEM = cell2mat(rawNumericColumns(:, 53));
Q15COM1 = rawCellColumns(:, 19);
Q15COM2 = rawCellColumns(:, 20);
Q15COM3 = rawCellColumns(:, 21);
Q16LIVE = cell2mat(rawNumericColumns(:, 54));
HOME = cell2mat(rawNumericColumns(:, 55));
Q17CITY = rawCellColumns(:, 22);
Q17STATE = rawCellColumns(:, 23);
Q17ZIP = cell2mat(rawNumericColumns(:, 56));
Q17COUNTRY = rawCellColumns(:, 24);
Q18AGE = cell2mat(rawNumericColumns(:, 57));
Q19GENDER = cell2mat(rawNumericColumns(:, 58));
Q20INCOME = cell2mat(rawNumericColumns(:, 59));
Q21FLY = cell2mat(rawNumericColumns(:, 60));
Q22SJC = cell2mat(rawNumericColumns(:, 61));
Q22OAK = cell2mat(rawNumericColumns(:, 62));
LANG = cell2mat(rawNumericColumns(:, 63));
WEIGHT = cell2mat(rawNumericColumns(:, 64));

% For code requiring serial dates (datenum) instead of datetime, uncomment
% the following line(s) below to return the imported dates as datenum(s).

% DEPTIME=datenum(DEPTIME);
% ARRTIME=datenum(ARRTIME);


%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me dateFormatIndex dates blankDates anyBlankDates invalidDates anyInvalidDates rawNumericColumns rawCellColumns R;